/*

Preserves orignal formatting

 */

/* comment before rule */
body/* comment after rule name */{
    /* comment before decl */
    padding /*  comment after prop */ : /*  comment before val */ 0 /*  comment after val */ 3px /* another comment */ 2px /* one more */ 1px /* last one*/;
    /* comment after decl */

    font-family:"Droid Arabic Kufi", "Droid Sans", "Helvetica Neue", Arial/*rtl:prepend:"Droid Arabic Kufi", */;
    font-size:14px/*rtl:14px*/;

    margin:
        0 /*top*/
        3px /*right
        multi-line
        comment
        */
        2px /*bottom*/
        1px /*left*/;

    border-right/*  comment after prop */: none;
}

/* empty options forces defaults */
/*rtl:begin:options: {}*/
/* should not process urls - default */
@import url("rtl-right-east.css");
/*rtl:end:options*/

/*rtl:begin:config:
{
    "options":{
        "autoRename": true,
        "stringMap":[
            {
            "name"    : "prev-next",
            "search"  : ["prev", "Prev", "PREV"],
            "replace" : ["next", "Next", "NEXT"],
            "options" : {"ignoreCase":false}
            }
        ]
    },
    "plugins":[
      {
        "name": "test",
        "directives":{
          "control": {},
          "value": []
        },
        "processors": [
          {
            "name": "content",
            "expr": /content/im,
            "action": function (prop, value, cxt) {
              if (value === '"A"') {
                return { 'prop': prop, 'value': '"ABC"' }
              } else if (value === '"ABC"') {
                return { 'prop': prop, 'value': '"A"' }
              }
              return { 'prop': prop, 'value': value }
            }
          }
        ]
      }
    ]
}*/
div:before { content: "ABC";} div:after { content: "A";}

.demo-next, .demo-Next, .demo-NEXT { content: 'p'; }
.demo-prev, .demo-Prev, .demo-PREV { content: 'n'; }

/*rtl:end:config*/

/*!rtl:begin:remove*/
/*rtl:end:remove*/


div {
  /*rtl:remove*/
  text-align: left;
  padding: 10px;
}

/*rtl:begin:ignore*/
.sample {
    text-align: left;
}
/*rtl:end:ignore*/


/*rtl:begin:options:{"autoRename":false, "clean": false}*/
.right { display:inline;}
/*rtl:begin:options:{"autoRename":true, "greedy": true}*/
.bleft { display:inline;}
/*rtl:end:options*/
.brighter { display:inline;}
/*rtl:end:options*/

/* auto rename only if a pair exists */

/*rtl:begin:options:{"autoRename":true, "autoRenameStrict": true}*/

/* The following should not be renamed */
.ltr{ display: inline-flex;}

/* But these should */
.left{ display: inline-flex;}
.right { display: block;}

/*rtl:end:options*/

.example {
  display:inline-block;
  padding:5px 20px 15px 10px;
  margin:5px 20px 15px 10px;
  border-style:dotted solid double dashed;
  border-width:1px 4px 3px 2px;
  border-color:red black blue green;
  box-shadow: 1em 0 0.4em gray, -3px 3px 30px black;
}

/*rtl:ignore*/
.code{
  direction:ltr;
  text-align:left;
}
/*# sourceMappingURL=custom_options.css.map */